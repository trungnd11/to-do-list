{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["ButtonStyled","styled","Button","p","iscompleted","css","Todo","todo","onCheckBtnClick","onDeleteBtnClick","isCompleted","toString","shouldFitContainer","iconBefore","className","onClick","id","primaryColor","iconAfter","name","TodoList","todoList","map","TODO_APP_STORAGE_KEY","App","useState","setTodoList","textInput","setTextInput","useEffect","storagedTodoList","localStorage","getItem","JSON","parse","setItem","stringify","onTextInputChange","useCallback","e","target","value","onAddBtnClick","v4","prevState","todoLists","index","findIndex","console","log","filter","placeholder","elemAfterInput","isDisabled","appearance","padding","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAMMA,EAAeC,YAAOC,IAAPD,CAAH,oTAMZ,SAACE,GAAD,MACkB,SAAlBA,EAAEC,aACFC,YADA,6EAsBS,SAASC,EAAT,GAA2D,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,iBACpD,OACE,cAACT,EAAD,CACEI,YAAaG,EAAKG,YAAYC,WAC9BC,oBAAkB,EAClBC,YACGN,EAAKG,aACJ,sBAAMI,UAAU,YAAYC,QAAS,kBAAMP,EAAgBD,EAAKS,KAAhE,SACE,cAAC,IAAD,CAAWC,aAAa,cAI9BC,UAEI,sBAAMJ,UAAU,YAAYC,QAAS,kBAAMN,EAAiBF,EAAKS,KAAjE,SACE,cAAC,IAAD,CAAkBC,aAAa,cAbvC,SAkBGV,EAAKY,OCpDG,SAASC,EAAT,GAAoE,IAAhDC,EAA+C,EAA/CA,SAAUb,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,iBAC5D,OACE,mCACGY,EAASC,KAAI,SAACf,GAAD,OACZ,cAACD,EAAD,CAAoBC,KAAMA,EAAMC,gBAAiBA,EAAiBC,iBAAkBA,GAAzEF,EAAKS,S,oBCDlBO,EAAuB,WA2EdC,MAzEf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOJ,EAAP,KAAiBK,EAAjB,KACA,EAAkCD,mBAAS,IAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAmBC,aAAaC,QAAQT,GAC1CO,GACFJ,EAAYO,KAAKC,MAAMJ,MAExB,IAEHD,qBAAU,WACRE,aAAaI,QAAQZ,EAAsBU,KAAKG,UAAUf,MACzD,CAACA,IAEJ,IAAMgB,EAAoBC,uBAAY,SAACC,GACrCX,EAAaW,EAAEC,OAAOC,SACrB,IAEGC,EAAgBJ,uBACpB,SAACC,GAECb,EAAY,CACV,CAAEV,GAAI2B,cAAMxB,KAAMQ,EAAWjB,aAAa,IADjC,mBAENW,KAGLO,EAAa,MAEf,CAACD,EAAWN,IAGRb,EAAkB8B,uBAAY,SAACtB,GACnCU,GAAY,SAACkB,GAAD,OACVA,EAAUtB,KAAI,SAACf,GAAD,OACZA,EAAKS,KAAOA,EAAZ,2BAAsBT,GAAtB,IAA4BG,aAAa,IAASH,UAGrD,IAEGE,EAAmB6B,uBAAY,SAACtB,GACpC,IAAI6B,EAAYZ,KAAKC,MAAMH,aAAaC,QAAQT,IAC5CuB,EAAQD,EAAUE,WAAU,SAACxC,GAAD,OAAUA,EAAKS,KAAOA,KACtDgC,QAAQC,IAAIH,GACZpB,EAAYmB,EAAYA,EAAUK,QAAO,SAAU3C,GACjD,OAAOA,EAAKS,KAAOA,QAEpB,IAEH,OACE,sBAAKF,UAAU,cAAf,UACE,8DACA,cAAC,IAAD,CACEK,KAAK,WACLgC,YAAY,uCACZC,eACE,cAAC,IAAD,CACEC,YAAa1B,EACb2B,WAAW,UACXvC,QAAS2B,EAHX,qBAQFrC,IAAK,CAAEkD,QAAS,eAChBd,MAAOd,EACP6B,SAAUnB,IAEZ,cAACjB,EAAD,CAAUC,SAAUA,EAAUb,gBAAiBA,EAAiBC,iBAAkBA,QCvExFgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7497059c.chunk.js","sourcesContent":["import Button from \"@atlaskit/button\";\r\nimport React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport CheckIcon from \"@atlaskit/icon/glyph/check\";\r\nimport EditorRemoveIcon from '@atlaskit/icon/glyph/editor/remove';\r\n\r\nconst ButtonStyled = styled(Button)`\r\n  margin-top: 20px;\r\n  text-align: left;\r\n\r\n  &,\r\n  &:hover {\r\n    ${(p) =>\r\n      p.iscompleted === 'true' &&\r\n      css`\r\n        text-decoration: line-through;\r\n      `}\r\n  }\r\n\r\n  &:hover {\r\n    .show-icon {\r\n      display: inline-block;\r\n    }\r\n  }\r\n\r\n  .show-icon {\r\n    display: none;\r\n\r\n    &:hover {\r\n      background-color: #e2e2e2;\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Todo({ todo, onCheckBtnClick, onDeleteBtnClick}) {\r\n  return (\r\n    <ButtonStyled\r\n      iscompleted={todo.isCompleted.toString()}\r\n      shouldFitContainer\r\n      iconBefore={\r\n        !todo.isCompleted && (\r\n          <span className='show-icon' onClick={() => onCheckBtnClick(todo.id)}>\r\n            <CheckIcon primaryColor='#4fff4f' />\r\n          </span>\r\n        )\r\n      }\r\n      iconAfter={\r\n        (\r\n          <span className='show-icon' onClick={() => onDeleteBtnClick(todo.id)}>\r\n            <EditorRemoveIcon primaryColor='#FF0000' />\r\n          </span>\r\n        )\r\n      }\r\n    >\r\n      {todo.name}\r\n    </ButtonStyled>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nexport default function TodoList({ todoList, onCheckBtnClick, onDeleteBtnClick }) {\r\n  return (\r\n    <>\r\n      {todoList.map((todo) => (\r\n        <Todo key={todo.id} todo={todo} onCheckBtnClick={onCheckBtnClick} onDeleteBtnClick={onDeleteBtnClick} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import TodoList from \"./components/TodoList\";\r\nimport Textfield from \"@atlaskit/textfield\";\r\nimport Button from \"@atlaskit/button\";\r\nimport { useCallback, useState, useEffect } from \"react\";\r\nimport { v4 } from \"uuid\";\r\n\r\nconst TODO_APP_STORAGE_KEY = \"TODO_APP\";\r\n\r\nfunction App() {\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [textInput, setTextInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const storagedTodoList = localStorage.getItem(TODO_APP_STORAGE_KEY);\r\n    if (storagedTodoList) {\r\n      setTodoList(JSON.parse(storagedTodoList));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todoList));\r\n  }, [todoList]);\r\n\r\n  const onTextInputChange = useCallback((e) => {\r\n    setTextInput(e.target.value);\r\n  }, []);\r\n\r\n  const onAddBtnClick = useCallback(\r\n    (e) => {\r\n      // them text input vao danh sach todoList\r\n      setTodoList([\r\n        { id: v4(), name: textInput, isCompleted: false },\r\n        ...todoList\r\n      ]);\r\n\r\n      setTextInput(\"\");\r\n    },\r\n    [textInput, todoList]\r\n  );\r\n\r\n  const onCheckBtnClick = useCallback((id) => {\r\n    setTodoList((prevState) =>\r\n      prevState.map((todo) =>\r\n        todo.id === id ? { ...todo, isCompleted: true } : todo\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const onDeleteBtnClick = useCallback((id) => {\r\n    let todoLists = JSON.parse(localStorage.getItem(TODO_APP_STORAGE_KEY));\r\n    let index = todoLists.findIndex((todo) => todo.id === id);\r\n    console.log(index);\r\n    setTodoList(todoLists = todoLists.filter(function (todo) {\r\n      return todo.id !== id;\r\n    }));\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"todoContent\">\r\n      <h3>Danh sách cần làm</h3>\r\n      <Textfield\r\n        name='add-todo'\r\n        placeholder='Thêm việc cần làm...'\r\n        elemAfterInput={\r\n          <Button\r\n            isDisabled={!textInput}\r\n            appearance='primary'\r\n            onClick={onAddBtnClick}\r\n          >\r\n            Thêm\r\n          </Button>\r\n        }\r\n        css={{ padding: \"2px 4px 2px\" }}\r\n        value={textInput}\r\n        onChange={onTextInputChange}\r\n      ></Textfield>\r\n      <TodoList todoList={todoList} onCheckBtnClick={onCheckBtnClick} onDeleteBtnClick={onDeleteBtnClick} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}